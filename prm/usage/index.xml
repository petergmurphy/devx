<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevX Tooling Docs â€“ Usage</title><link>https://puppetlabs.github.io/devx/prm/usage/</link><description>Recent content in Usage on DevX Tooling Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://puppetlabs.github.io/devx/prm/usage/index.xml" rel="self" type="application/rss+xml"/><item><title>Prm: Installing Tools</title><link>https://puppetlabs.github.io/devx/prm/usage/tool_installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://puppetlabs.github.io/devx/prm/usage/tool_installation/</guid><description>
&lt;p>This document explains how you can install tools to execute with PRM.&lt;/p>
&lt;p>By default, tools are installed to the &lt;code>tools&lt;/code> folder alongside PRM unless the &lt;code>toolpath&lt;/code> flag is specified with an alternate location.&lt;/p>
&lt;h3 id="local-archive">Local archive&lt;/h3>
&lt;p>Tool packages can be installed locally using the &lt;code>prm install&lt;/code> command.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">prm install ~/my-tool-1.2.3.tar.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That command will install the tool contained in &lt;code>my-tool-1.2.3.tar.gz&lt;/code> to the default location.&lt;/p>
&lt;h3 id="remote-archive">Remote archive&lt;/h3>
&lt;p>Tool packages stored remotely can be automatically downloaded and extracted with &lt;code>prm install&lt;/code> so long as you know the URL to where the archive is.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">prm install https://packages.mycompany.com/prm/my-tool-1.2.3.tar.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command will attempt to download the PRM tool from the specified url and then install it like any other locally available PRM tool archive.&lt;/p>
&lt;h3 id="remote-git-repository">Remote git repository&lt;/h3>
&lt;p>&lt;strong>Git&lt;/strong> must be installed for this feature to work. The git repository must contain only one tool and must be structured with the &lt;code>prm-config.yml&lt;/code> file and the &lt;code>content&lt;/code> directory in the root directory of the repository.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">prm install --git-uri https://github.com/myorg/myawesometool
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command will attempt to clone the PRM tool from the git repository at the specified URI and then install it to the default tool location.&lt;/p>
&lt;h3 id="force-tool-installation">Force tool installation&lt;/h3>
&lt;p>Adding the &lt;code>-f&lt;/code> or the &lt;code>--force&lt;/code> flag to the &lt;code>prm install&lt;/code> command will forcefully install/overwrite a tool if there is a tool installed with the same &lt;code>author&lt;/code>, &lt;code>name&lt;/code> and &lt;code>version&lt;/code>.&lt;/p>
&lt;h3 id="updating-tools">Updating tools&lt;/h3>
&lt;p>While there is no &lt;code>update&lt;/code> command, newer versions of tools can be installed like any other tool package.&lt;/p>
&lt;p>Currently, only the latest version of a selected tool is executable; the ability to select an older version of the tool to execute will be added in the future.&lt;/p>
&lt;h3 id="list-installed-tools">List installed tools&lt;/h3>
&lt;p>Installed tools can be listed by running the command &lt;code>prm exec --list&lt;/code>, displayed in the following format:&lt;/p>
&lt;p>&lt;img src="https://github.com/puppetlabs/prm/blob/main/docs/md/content/images/exec-list-tools.png?raw=true" alt="prm tool list screenshot">&lt;/p>
&lt;p>The &lt;code>--toolpath&lt;/code> flag can also be added to list tools installed in an alternate location.&lt;/p></description></item><item><title>Prm: Using the Explain Subsystem</title><link>https://puppetlabs.github.io/devx/prm/usage/explain-subsystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://puppetlabs.github.io/devx/prm/usage/explain-subsystem/</guid><description>
&lt;p>The Explain subsystem is a built-in way to surface PRMs full documentation at the commandline with pretty formatting.
While our documentation is published online, sometimes it is useful to read it in the terminal you&amp;rsquo;re working from.&lt;/p>
&lt;p>There are three broad categories of documentation used in this project: reference, narrative, and concept.
The Explain subsystem is used to surface narrative and concept docs.&lt;/p>
&lt;p>Reference docs are surfaced using the built-in help subsystem by calling &lt;code>prm help &amp;lt;command&amp;gt;&lt;/code> or &lt;code>prm &amp;lt;command&amp;gt; --help&lt;/code>.&lt;/p>
&lt;p>Narrative docs are walkthroughs or guides which take you through a specific action or problem.
Concept docs are used to explain broader or deeper topics, like configuration and telemetry.&lt;/p>
&lt;p>This guide will walk you through how to look for and read narrative and concept documents from the terminal.&lt;/p>
&lt;h2 id="searching-for-topics">Searching for Topics&lt;/h2>
&lt;p>If you run &lt;code>prm explain&lt;/code> without any additional parameters, it will list all available topics into your terminal in a table format.
This will include the name, description, category, and any tags associated with each topic.&lt;/p>
&lt;p>You can also filter by category using the &lt;code>category&lt;/code> and &lt;code>tag&lt;/code> flags, including using them together.
Moreover, PRM already knows the available tags and categories, so if you&amp;rsquo;re using shell completion, you can tab or step through them.&lt;/p>
&lt;p>For example, the command below will display any topics which are part of the &lt;code>narrative&lt;/code> category and include the &lt;code>install&lt;/code> tag:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">prm explain --category narrative --tag install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also use shell completion to auto-complete the list of available topics directly.&lt;/p>
&lt;h2 id="displaying-a-single-topic">Displaying a Single Topic&lt;/h2>
&lt;p>Once you have found the name of the topic you want to read, either by searching the list of topics or auto-completing in the terminal, you can run &lt;code>prm explain &amp;lt;name&amp;gt;&lt;/code> to display it.&lt;/p>
&lt;p>For example, to read this documentation:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">prm explain explain-subsystem
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which will render this document to your terminal with syntax highlighting.&lt;/p>
&lt;h2 id="documentation-versions">Documentation Versions&lt;/h2>
&lt;p>The version of the documentation available in the terminal is always the documents as they existed when that version was shipped.
For updated docs, you will need to read the documentation online, either in &lt;a href="https://github.com/puppetlabs/prm/tree/main/docs/md/content">Github&lt;/a> or on our &lt;a href="https://puppetlabs.github.io/devx/prm/">docs site&lt;/a>.&lt;/p></description></item><item><title>Prm: Sharing Tools</title><link>https://puppetlabs.github.io/devx/prm/usage/tool-sharing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://puppetlabs.github.io/devx/prm/usage/tool-sharing/</guid><description>
&lt;p>After you&amp;rsquo;ve written your own tool you may wish to share it with other members of your team or the wider Puppet community. Work is underway to improve this initial functionality.&lt;/p>
&lt;h3 id="prm-build">prm build&lt;/h3>
&lt;p>This command will attempt to package the current working directory. You can change the directory to pack by providing &lt;code>--sourcedir&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">prm build &lt;span style="color:#ff79c6">[&lt;/span>--sourcedir &amp;lt;dir&amp;gt;&lt;span style="color:#ff79c6">][&lt;/span>--targetdir &amp;lt;dir&amp;gt;&lt;span style="color:#ff79c6">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>build&lt;/code> command will ensure that the directory that you are attempting to package will produce a valid Puppet Runtime Manager tool by looking for a &lt;code>prm-config.yml&lt;/code> and a &lt;code>content&lt;/code> directory.&lt;/p>
&lt;p>The resulting &lt;code>tar.gz&lt;/code> package will be created by default in &lt;code>$cwd/pkg&lt;/code>. You can change the directory the package is created in by providing &lt;code>--targetdir&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>NOTE: When using &lt;code>--sourcedir&lt;/code> use either the full path or the relative path without the leading &lt;code>./&lt;/code> (&lt;code>.\&lt;/code> on Windows).
If you use the leading &lt;code>./&lt;/code> it will incorrectly tar the project.&lt;/p>
&lt;/blockquote></description></item></channel></rss>